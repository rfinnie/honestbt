#!/usr/bin/env python3

# honestbt
# Copyright (C) 2019 Ryan Finnie
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import argparse
import base64
import datetime
import mmap
import os
import random
import shlex
import sys

try:
    from Cryptodome.Cipher import AES
except ImportError:
    from Crypto.Cipher import AES

try:
    from Cryptodome.Util import Counter
except ImportError:
    from Crypto.Util import Counter

try:
    random_sys = random.SystemRandom()
except AttributeError:
    random_sys = random


def is_pow2(n):
    return (n != 0) and ((n & (n - 1)) == 0)


def strip_microseconds(td):
    return td - datetime.timedelta(microseconds=td.microseconds)


def prettyb(number, mode=1000, precision=2):
    if mode == 1024:
        tags = ["", "Ki", "Mi", "Gi", "Ti"]
        divide = 1024
    else:
        tags = ["", "K", "M", "G", "T"]
        divide = 1000
    attag = 0
    while number >= divide:
        number = number / divide
        attag += 1
    return "{{:0.0{}f}}{{}}".format(precision).format(number, tags[attag])


def parse_args(argv=None):
    if argv is None:
        argv = sys.argv

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    # Positionals
    parser.add_argument(
        "device", type=str, default=None, help="Device or file to destructively test"
    )

    # Options
    parser.add_argument(
        "--key", type=str, help="Base64-encoded 128/192/256 bit encryption key"
    )
    parser.add_argument(
        "--fuzz",
        type=float,
        default=0.0,
        help="Percentage probability to modify each written byte",
    )
    parser.add_argument(
        "--begin",
        type=int,
        default=0,
        help="Zero-indexed byte to begin at within the device",
    )
    parser.add_argument(
        "--end",
        type=int,
        default=0,
        help="Zero-indexed byte to end at within the device (default last byte; device size minus 1 byte)",
    )
    parser.add_argument(
        "--block-size",
        type=int,
        default=1048576,
        help="I/O block size in bytes, must be multiple of device logical block size",
    )
    parser.add_argument(
        "--resume-write", type=int, default=-1, help="Byte to resume write mode"
    )
    parser.add_argument(
        "--resume-test",
        type=int,
        default=-1,
        help="Byte to resume test mode (skip write mode)",
    )
    parser.add_argument(
        "--fake-rollover",
        type=int,
        default=0,
        help="Beginning byte of simulated rollover device",
    )
    parser.add_argument(
        "--fake-zeroed",
        type=int,
        default=0,
        help="Beginning byte of simulated zeroed data",
    )
    parser.add_argument(
        "--skip-test", action="store_true", help="Skip test entirely after write"
    )

    args = parser.parse_args(args=argv[1:])
    args.parser = parser

    if args.key:
        args.key = base64.b64decode(args.key)
    else:
        args.key = bytes([random_sys.randint(0, 255) for _ in range(32)])

    if (len(args.key) * 8) not in (128, 192, 256):
        parser.error("Key must be 128, 192 or 256 bits")

    for f, k in (
        ("--begin", "begin"),
        ("--resume-write", "resume_write"),
        ("--resume-test", "resume_test"),
    ):
        v = getattr(args, k)
        if v == parser.get_default(k):
            continue
        if not (v / args.block_size).is_integer():
            parser.error(
                "{}={} must be divisible by --block-size={}".format(
                    f, v, args.block_size
                )
            )

    return args


class FileMmap:
    def __init__(self, filename, block_size=1048576):
        self.block_size = block_size
        flags = os.O_RDWR
        if hasattr(os, "O_DIRECT"):
            flags |= os.O_DIRECT
        try:
            self.fileno = os.open(filename, flags)
        except OSError as e:
            if e.errno != 22:
                raise
            flags = os.O_RDWR
            self.fileno = os.open(filename, flags)
        self.file_size = os.lseek(self.fileno, 0, os.SEEK_END)
        os.lseek(self.fileno, 0, os.SEEK_SET)
        self.mmap = mmap.mmap(-1, block_size, flags=mmap.MAP_PRIVATE)

    def seek(self, pos, how=os.SEEK_SET):
        return os.lseek(self.fileno, pos, how)

    def write(self, data):
        if len(data) == self.block_size:
            self.mmap.seek(0)
            self.mmap.write(data)
            return os.writev(self.fileno, [self.mmap])
        else:
            mmap_temp = mmap.mmap(-1, len(data), flags=mmap.MAP_PRIVATE)
            mmap_temp.write(data)
            bytes_written = os.writev(self.fileno, [mmap_temp])
            mmap_temp.close()
            return bytes_written

    def read(self):
        self.mmap.seek(0)
        bytes_read = os.readv(self.fileno, [self.mmap])
        self.mmap.seek(0)
        return self.mmap.read(bytes_read)

    def flush(self):
        return os.fsync(self.fileno)


class HonestBT:
    def __init__(self):
        self.args = parse_args()
        self.pos = 0
        self.written = 0
        self.tested = 0

    def print_resume(self, stage):
        args = [
            "--key={}".format(base64.b64encode(self.args.key).decode("UTF-8")),
            "--resume-{}={}".format(stage, self.pos),
        ]
        arg_mappings = [
            ("--block-size", "block_size"),
            ("--begin", "begin"),
            ("--end", "end"),
            ("--fake-rollover", "fake_rollover"),
            ("--fake-zeroed", "fake_zeroed"),
            ("--fuzz", "fuzz"),
        ]
        if stage != "test":
            arg_mappings.append(("--skip-test", "skip_test"))
        for k, a in arg_mappings:
            v = getattr(self.args, a)
            if v == self.args.parser.get_default(a):
                continue
            if type(v) == bool:
                args.append(k)
            else:
                args.append("{}={}".format(k, v))
        print()
        print("To resume:")
        print(
            "{} {} {}".format(
                shlex.quote(sys.argv[0]),
                " ".join([shlex.quote(x) for x in args]),
                shlex.quote(self.args.device),
            )
        )
        sys.exit(0)

    def write_data(self):
        if self.args.resume_test >= 0:
            print("Skipping write")
            return

        print("Writing")

        self.pos = 0
        if self.args.begin:
            print(
                "Beginning at {}B, as requested".format(prettyb(self.args.begin, 1024))
            )
            self.pos = self.args.begin
        if self.args.resume_write >= 0:
            print(
                "Resuming write at {}B, as requested".format(
                    prettyb(self.args.resume_write, 1024)
                )
            )
            self.pos = self.args.resume_write
        self.fh.seek(self.pos)

        user_interrupted = False
        try:
            self.write_data_loop()
        except IOError as e:
            raise
            print()
            print(str(e))
            self.print_resume("write")
            raise
        except KeyboardInterrupt:
            user_interrupted = True
            print()

        print("Flushing")
        self.fh.flush()
        print("Successfully wrote {}B".format(prettyb(self.written, 1024)))
        if user_interrupted:
            self.print_resume("write")

    def write_data_loop(self):
        initial_value = int(self.pos / self.cipher_block_size)
        cipher = AES.new(
            self.args.key,
            AES.MODE_CTR,
            counter=Counter.new(128, initial_value=initial_value),
        )
        time_write_begin = datetime.datetime.now()
        pos_write_begin = self.pos
        time_last_print = time_write_begin
        pos_last_print = 0

        while True:
            if (self.pos + self.args.block_size) > self.args.end:
                block_size = self.args.end - self.pos + 1
            else:
                block_size = self.args.block_size
            encrypted = cipher.encrypt(bytes(block_size))

            if self.args.fuzz:
                encrypted = self.fuzz_data(encrypted)
            if self.args.fake_zeroed and self.pos >= (
                self.args.fake_zeroed + self.args.begin
            ):
                encrypted = bytes(block_size)
            if self.args.fake_rollover:
                self.fh.seek(
                    (
                        self.args.begin
                        + ((self.pos - self.args.begin) % self.args.fake_rollover)
                    )
                )

            self.fh.write(encrypted)
            self.written += block_size
            self.pos += block_size
            if self.pos >= self.args.end:
                break
            time_now = datetime.datetime.now()
            if time_now >= (time_last_print + datetime.timedelta(seconds=1)):
                estimated_end = time_write_begin + datetime.timedelta(
                    seconds=(time_now - time_write_begin).total_seconds()
                    / (self.written / (self.args.end - pos_write_begin))
                )
                print(
                    "\x1b[K{}B written ({:.2%}), {}B/s, ~{} left\r".format(
                        prettyb(self.written, 1024),
                        (self.pos - self.args.begin)
                        / (self.args.end - self.args.begin),
                        prettyb(
                            (self.written - pos_last_print)
                            / (time_now - time_last_print).total_seconds(),
                            1024,
                        ),
                        strip_microseconds(estimated_end - time_now),
                    ),
                    end="",
                )
                sys.stdout.flush()
                time_last_print = time_now
                pos_last_print = self.written
        time_now = datetime.datetime.now()
        print(
            "\x1b[K{}B written, {}B/s in {}".format(
                prettyb(self.written, 1024),
                prettyb(
                    self.written / (time_now - time_write_begin).total_seconds(), 1024
                ),
                strip_microseconds(time_now - time_write_begin),
            )
        )

    def test_data(self):
        self.pos = 0

        if self.args.skip_test:
            print("Skipping test")
            self.print_resume("test")
            return

        print("Testing")

        if self.args.begin:
            print(
                "Beginning at {}B, as requested".format(prettyb(self.args.begin, 1024))
            )
            self.pos = self.args.begin
        if self.args.resume_test >= 0:
            print(
                "Resuming test at {}B, as requested".format(
                    prettyb(self.args.resume_test, 1024)
                )
            )
            self.pos = self.args.resume_test
        self.fh.seek(self.pos)

        try:
            self.test_data_loop()
        except IOError as e:
            print()
            print(str(e))
            self.print_resume("test")
            raise
        except KeyboardInterrupt:
            print()
            self.print_resume("test")

    def test_data_loop(self):
        initial_value = int(self.pos / self.cipher_block_size)
        cipher = AES.new(
            self.args.key,
            AES.MODE_CTR,
            counter=Counter.new(128, initial_value=initial_value),
        )
        time_test_begin = datetime.datetime.now()
        pos_test_begin = self.pos
        time_last_print = time_test_begin
        pos_last_print = 0

        while True:
            if (self.pos + self.args.block_size) > self.args.end:
                block_size = self.args.end - self.pos + 1
            else:
                block_size = self.args.block_size

            if self.args.fake_rollover:
                self.fh.seek(
                    (
                        self.args.begin
                        + ((self.pos - self.args.begin) % self.args.fake_rollover)
                    )
                )
            received = self.fh.read()
            encrypted = cipher.encrypt(bytes(block_size))

            if encrypted != received:
                for byte_pos in range(block_size):
                    if encrypted[byte_pos] != received[byte_pos]:
                        print(
                            "{} is bad: expected {:02x}, got {:02x}".format(
                                self.pos + byte_pos,
                                encrypted[byte_pos],
                                received[byte_pos],
                            )
                        )

            self.tested += block_size
            self.pos += block_size
            if self.pos >= self.args.end:
                break
            time_now = datetime.datetime.now()
            if time_now >= (time_last_print + datetime.timedelta(seconds=1)):
                estimated_end = time_test_begin + datetime.timedelta(
                    seconds=(time_now - time_test_begin).total_seconds()
                    / (self.tested / (self.args.end - pos_test_begin))
                )
                print(
                    "\x1b[K{}B tested ({:.2%}), {}B/s, ~{} left\r".format(
                        prettyb(self.tested, 1024),
                        (self.pos - self.args.begin)
                        / (self.args.end - self.args.begin),
                        prettyb(
                            (self.tested - pos_last_print)
                            / (time_now - time_last_print).total_seconds(),
                            1024,
                        ),
                        strip_microseconds(estimated_end - time_now),
                    ),
                    end="",
                )
                sys.stdout.flush()
                time_last_print = time_now
                pos_last_print = self.tested
        time_now = datetime.datetime.now()
        print(
            "\x1b[K{}B tested, {}B/s in {}".format(
                prettyb(self.tested, 1024),
                prettyb(
                    self.tested / (time_now - time_test_begin).total_seconds(), 1024
                ),
                strip_microseconds(time_now - time_test_begin),
            )
        )

    def fuzz_data(self, data):
        pct_fraction = self.args.fuzz / 100.0
        data_bytearray = bytearray(data)
        for i in range(len(data)):
            if random.random() < pct_fraction:
                old_byte = data_bytearray[i]
                new_byte = random.randint(0, 255)
                print(
                    "FUZZ: Changing byte {} from {:02x} to {:02x}".format(
                        self.pos + i, old_byte, new_byte
                    )
                )
                data_bytearray[i] = new_byte
        return bytes(data_bytearray)

    def main(self):
        print("Testing {}".format(self.args.device))

        self.fh = FileMmap(self.args.device, self.args.block_size)

        if not self.args.end:
            self.args.end = self.fh.file_size - 1
        if self.args.end <= 0:
            self.args.parser.error(
                "Cannot determine device size, specify --end of device size minus 1 byte"
            )

        print("Key: {}".format(base64.b64encode(self.args.key).decode("UTF-8")))
        print(
            "Block size: {}B ({})".format(
                prettyb(self.args.block_size, 1024), self.args.block_size
            )
        )
        print("Begin: {}B ({})".format(prettyb(self.args.begin, 1024), self.args.begin))
        print("End: {}B ({})".format(prettyb(self.args.end, 1024), self.args.end))

        self.cipher_block_size = AES.new(
            self.args.key, AES.MODE_CTR, counter=Counter.new(128)
        ).block_size

        self.write_data()
        self.test_data()


if __name__ == "__main__":
    honestbt = HonestBT()
    honestbt.main()
